{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","SideBar/SideBar.js","App.js","reportWebVitals.js","index.js"],"names":["PRIMARY_COLOR","SortingVisualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","divIdx1","divIdx2","arrayBars","document","getElementsByClassName","tempHeight","style","height","animations","a","length","backgroundColor","swapDiv","Promise","resolve","setTimeout","arrayTemp","j","NUMBER_OF_ARRAY_BARS","animateSwaps","quickSortPartition","start","end","originalStart","originalEnd","console","log","pivotIdx","pivot","newPivotIdx","className","map","value","idx","onClick","bubbleSort","quickSort","React","Component","SideBar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebb9870f.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nconst SPEED_OF_ANIMATION = 50;\nconst NUMBER_OF_ARRAY_BARS = 80;\nconst PRIMARY_COLOR = 'pink';\nconst COMPARE_COLOR = 'yellow';\nconst SWAP_COLOR = 'red';\n\n\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n    \n    resetArray() {\n        function randomIntFromInterval(min, max) {\n            return Math.floor(Math.random() * (max - min + 1) + min);\n        }\n\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(20, 600));\n        }\n        this.setState({array});\n        // console.log(array);\n    }\n\n\n\n    // swaps the bars on the main div array i.e arrayBars.\n    swapDiv(divIdx1, divIdx2) {\n        // basically just swap the height style\n        var arrayBars = document.getElementsByClassName('array-bar');\n\n        let tempHeight = arrayBars[divIdx2].style.height;\n        arrayBars[divIdx2].style.height = arrayBars[divIdx1].style.height;\n        arrayBars[divIdx1].style.height = tempHeight;\n    }\n\n    async animateSwaps(animations) {\n\n        var arrayBars = document.getElementsByClassName('array-bar');\n\n        for(let i=0; i<animations.length; i++) {\n\n            let divIdx1 = animations[i][0];\n            let divIdx2 = animations[i][1];\n            // console.log(divIdx1, divIdx2);\n\n            // change the color of the element getting swapped to swap_color\n            arrayBars[divIdx1].style.backgroundColor = SWAP_COLOR;\n            arrayBars[divIdx2].style.backgroundColor = SWAP_COLOR;\n\n            this.swapDiv(divIdx1, divIdx2);\n\n            // wait for a few milisecond\n            await new Promise(resolve => setTimeout(resolve, SPEED_OF_ANIMATION));\n\n            // change back the color of the element got swapped to PRIMARY_COLOR\n            arrayBars[divIdx1].style.backgroundColor = PRIMARY_COLOR;\n            arrayBars[divIdx2].style.backgroundColor = PRIMARY_COLOR;\n        }\n    }\n\n\n    bubbleSort() {\n        let arrayTemp = this.state.array;\n        let animations = [];\n        \n        // sorting arrTemp to get the element ids to swap\n        for(let i=0; i<NUMBER_OF_ARRAY_BARS; i++) {\n            for(let j=0; j<NUMBER_OF_ARRAY_BARS-1; j++) {\n                if(arrayTemp[j] > arrayTemp[j+1]) {\n                    [arrayTemp[j], arrayTemp[j+1]] = [arrayTemp[j+1], arrayTemp[j]];\n                    animations.push([j,j+1]);\n                }\n            }\n        }\n\n        // console.log(animations);\n        this.animateSwaps(animations);\n    }\n\n    quickSort() {\n        let arrayTemp = this.state.array; // used as a global variable in quickSortHelper and  quickSortPartition\n        let animations = [];\n\n        function quickSortPartition(start, end) {\n\n            let originalStart = start, originalEnd = end;;\n\n            // console.log(typeof(start), typeof(end));\n            \n            // let chk = 0;\n            if(start<0 || end>=arrayTemp.length || start >= end) {\n                return -1;\n            }\n            console.log(start, end);\n\n            // if(chk == 1)    return;\n\n            console.log('array', arrayTemp);\n\n            let pivotIdx = end;\n            let pivot = arrayTemp[end];\n            end--;\n\n            while(true) {\n                while(arrayTemp[start] < pivot && start<end)    start++;\n                while(arrayTemp[end] >= pivot && start<end)       end--;\n\n                if(start == end)\n                    break;\n                else {\n                    [arrayTemp[start], arrayTemp[end]] = [arrayTemp[end], arrayTemp[start]];\n                    animations.push([start, end]);\n                    // start++;\n                    // end--;\n                }\n            }\n\n            // swap the pivot with the current end //end+1 == pivotIdx && \n            if(!(arrayTemp[pivotIdx]>arrayTemp[end] )) {\n                [arrayTemp[end], arrayTemp[pivotIdx]] = [arrayTemp[pivotIdx], arrayTemp[end]];\n                animations.push([end, pivotIdx]);\n            }\n\n            // after swaping the element at end is the pivot\n            let newPivotIdx = end;\n            // console.log('pivot ', newPivotIdx);\n\n            // console.log('partiton at', pivot)\n            // console.log('new array', arrayTemp);\n            // console.log('1. ', originalStart, newPivotIdx-1);\n            // console.log('2. ', newPivotIdx+1, originalEnd);\n            // console.log(\"\\n\\n\\n\");\n\n            quickSortPartition(originalStart, newPivotIdx-1);\n            quickSortPartition(newPivotIdx+1, originalEnd);\n        }\n        function quickSortHelper() {\n            // console.log('before', arrayTemp);\n            quickSortPartition(0, arrayTemp.length-1);\n            // console.log('after', arrayTemp);\n        }\n\n        quickSortHelper();\n        this.animateSwaps(animations);\n    }\n    \n\n\n    render() {\n\n        const { array } = this.state;\n\n        return (\n            <>\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                <div\n                    className=\"array-bar\"\n                    style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`,\n                    }}></div>\n                ))}\n            </div>\n\n            <div>\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n            </div>\n            </>\n        )\n    }\n}","import React from 'react';\nimport './SideBar.css';\n\nexport default class SideBar extends React.Component {\n    \n    render() {\n        return (  \n            <div className='side-bar'></div>           \n        )\n    }\n}","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport SideBar from './SideBar/SideBar'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideBar/>\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}