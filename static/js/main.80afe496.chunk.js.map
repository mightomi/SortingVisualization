{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","SideBar/SideBar.js","App.js","reportWebVitals.js","index.js"],"names":["PRIMARY_COLOR","SortingVisualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","divIdx1","divIdx2","arrayBars","document","getElementsByClassName","tempHeight","style","height","animations","a","lastIdx1","lastIdx2","length","backgroundColor","swapDiv","Promise","resolve","setTimeout","arrayTemp","j","NUMBER_OF_ARRAY_BARS","animateSwaps","className","map","value","idx","onClick","bubbleSort","React","Component","SideBar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kTAKMA,EAAgB,OAODC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,IAJI,E,qDAQnB,WACIC,KAAKC,e,wBAGT,WAMI,IADA,IAJ+BC,EAAKC,EAI9BJ,EAAQ,GACLK,EAAI,EAAGA,EA3BK,GA2BqBA,IACtCL,EAAMM,MANqBH,EAMM,GANDC,EAMK,IAL9BG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,KAOxDF,KAAKS,SAAS,CAACV,Y,qBAOnB,SAAQW,EAASC,GAEb,IAAIC,EAAYC,SAASC,uBAAuB,aAE5CC,EAAaH,EAAUD,GAASK,MAAMC,OAC1CL,EAAUD,GAASK,MAAMC,OAASL,EAAUF,GAASM,MAAMC,OAC3DL,EAAUF,GAASM,MAAMC,OAASF,I,iEAGtC,WAAmBG,GAAnB,yBAAAC,EAAA,sDAEQP,EAAYC,SAASC,uBAAuB,aAC5CM,EAAW,EAAGC,EAAS,EAEnBjB,EAAE,EALd,YAKiBA,EAAEc,EAAWI,QAL9B,wBAOYZ,EAAUQ,EAAWd,GAAG,GACxBO,EAAUO,EAAWd,GAAG,GAI5BQ,EAAUQ,GAAUJ,MAAMO,gBAAkB5B,EAC5CiB,EAAUS,GAAUL,MAAMO,gBAAkB5B,EAE5CyB,EAAWV,EACXW,EAAWV,EAGXC,EAAUF,GAASM,MAAMO,gBA9DlB,MA+DPX,EAAUD,GAASK,MAAMO,gBA/DlB,MAiEPvB,KAAKwB,QAAQd,EAASC,GAtB9B,UAwBc,IAAIc,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAvEzB,OA+CvB,QAKsCtB,IALtC,gE,+EA4BA,WAMI,IAJA,IAAIwB,EAAY5B,KAAKF,MAAMC,MACvBmB,EAAa,GAGTd,EAAE,EAAGA,EAhFQ,GAgFgBA,IACjC,IAAI,IAAIyB,EAAE,EAAGA,EAAEC,GAAwBD,IACnC,GAAGD,EAAUC,GAAKD,EAAUC,EAAE,GAAI,CAAC,IAAD,EACG,CAACD,EAAUC,EAAE,GAAID,EAAUC,IAA3DD,EAAUC,GADmB,KACfD,EAAUC,EAAE,GADG,KAE9BX,EAAWb,KAAK,CAACwB,EAAEA,EAAE,IAMjC7B,KAAK+B,aAAab,K,oBAItB,WAAU,IAAD,OAEGnB,EAAUC,KAAKF,MAAfC,MAER,OACI,qCACA,qBAAKiC,UAAU,kBAAf,SACKjC,EAAMkC,KAAI,SAACC,EAAOC,GAAR,OACX,qBACIH,UAAU,YACVhB,MAAO,CACHO,gBAAiB5B,EACjBsB,OAAO,GAAD,OAAKiB,EAAL,cAKlB,gCACI,wBAAQE,QAAS,kBAAM,EAAKnC,cAA5B,gCACA,wBAAQmC,QAAS,kBAAM,EAAKC,cAA5B,mC,GAzG+BC,IAAMC,WCThCC,G,kKAEjB,WACI,OACI,qBAAKR,UAAU,iB,GAJUM,IAAMC,YCW5BE,MATf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.80afe496.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nconst SPEED_OF_ANIMATION = 80;\nconst NUMBER_OF_ARRAY_BARS = 30;\nconst PRIMARY_COLOR = 'pink';\nconst COMPARE_COLOR = 'yellow';\nconst SWAP_COLOR = 'red';\n\n\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n    \n    resetArray() {\n        function randomIntFromInterval(min, max) {\n            return Math.floor(Math.random() * (max - min + 1) + min);\n        }\n\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(20, 600));\n        }\n        this.setState({array});\n        // console.log(array);\n    }\n\n\n\n    // swaps the bars on the main div array i.e arrayBars.\n    swapDiv(divIdx1, divIdx2) {\n        // basically just swap the height style\n        var arrayBars = document.getElementsByClassName('array-bar');\n\n        let tempHeight = arrayBars[divIdx2].style.height;\n        arrayBars[divIdx2].style.height = arrayBars[divIdx1].style.height;\n        arrayBars[divIdx1].style.height = tempHeight;\n    }\n\n    async animateSwaps(animations) {\n\n        var arrayBars = document.getElementsByClassName('array-bar');\n        let lastIdx1 = 0, lastIdx2=0;\n\n        for(let i=0; i<animations.length; i++) {\n\n            let divIdx1 = animations[i][0];\n            let divIdx2 = animations[i][1];\n            // console.log(divIdx1, divIdx2);\n\n            // change back the color to primary_color for the swapped last elements\n            arrayBars[lastIdx1].style.backgroundColor = PRIMARY_COLOR;\n            arrayBars[lastIdx2].style.backgroundColor = PRIMARY_COLOR;\n            // update the last index\n            lastIdx1 = divIdx1;\n            lastIdx2 = divIdx2;\n\n            // change the color of the element getting swapped to swap_color\n            arrayBars[divIdx1].style.backgroundColor = SWAP_COLOR;\n            arrayBars[divIdx2].style.backgroundColor = SWAP_COLOR;\n\n            this.swapDiv(divIdx1, divIdx2);\n\n            await new Promise(resolve => setTimeout(resolve, SPEED_OF_ANIMATION));\n        }\n    }\n\n    bubbleSort() {\n\n        let arrayTemp = this.state.array;\n        let animations = [];\n        \n        // sorting arrTemp to get the element ids to swap\n        for(let i=0; i<NUMBER_OF_ARRAY_BARS; i++) {\n            for(let j=0; j<NUMBER_OF_ARRAY_BARS-1; j++) {\n                if(arrayTemp[j] > arrayTemp[j+1]) {\n                    [arrayTemp[j], arrayTemp[j+1]] = [arrayTemp[j+1], arrayTemp[j]];\n                    animations.push([j,j+1]);\n                }\n            }\n        }\n\n        // console.log(animations);\n        this.animateSwaps(animations);\n    }\n\n    \n    render() {\n\n        const { array } = this.state;\n\n        return (\n            <>\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                <div\n                    className=\"array-bar\"\n                    style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`,\n                    }}></div>\n                ))}\n            </div>\n\n            <div>\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n            </div>\n            </>\n        )\n    }\n}","import React from 'react';\nimport './SideBar.css';\n\nexport default class SideBar extends React.Component {\n    \n    render() {\n        return (  \n            <div className='side-bar'></div>           \n        )\n    }\n}","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport SideBar from './SideBar/SideBar'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideBar/>\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}